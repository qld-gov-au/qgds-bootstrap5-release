{
  "version": 3,
  "sources": ["../../../src/js/handlebars.helpers.js"],
  "sourcesContent": ["/* global Handlebars */\n/**\n * Registers Handlebars Helpers\n * @param {Handlebars} handlebars Templating engine\n * @returns {void} Result of the helper operation\n */\n\nexport default function handlebarsHelpers(handlebars) {\n  // contains - if first object is in collection (second object) to return true\n  handlebars.registerHelper(\"contains\", function (needle, haystack, options) {\n    needle = handlebars.escapeExpression(needle);\n    haystack = handlebars.escapeExpression(haystack);\n    return haystack.indexOf(needle) > -1\n      ? options.fn(this)\n      : options.inverse(this);\n  });\n  // ifCond - checks conditions\n  handlebars.registerHelper(\"ifCond\", function (v1, operator, v2, options) {\n    switch (operator) {\n    case \"==\":\n      return v1 == v2 ? options.fn(this) : options.inverse(this);\n    case \"===\":\n      return v1 === v2 ? options.fn(this) : options.inverse(this);\n    case \"!=\":\n      return v1 != v2 ? options.fn(this) : options.inverse(this);\n    case \"!==\":\n      return v1 !== v2 ? options.fn(this) : options.inverse(this);\n    case \"<\":\n      return v1 < v2 ? options.fn(this) : options.inverse(this);\n    case \"<=\":\n      return v1 <= v2 ? options.fn(this) : options.inverse(this);\n    case \">\":\n      return v1 > v2 ? options.fn(this) : options.inverse(this);\n    case \">=\":\n      return v1 >= v2 ? options.fn(this) : options.inverse(this);\n    case \"&&\":\n      return v1 && v2 ? options.fn(this) : options.inverse(this);\n    case \"||\":\n      return v1 || v2 ? options.fn(this) : options.inverse(this);\n    case \"contains\":\n      if (typeof v1 == \"string\" && typeof v2 == \"string\") {\n        return v1.toLowerCase().indexOf(v2.toLowerCase()) >= 0\n          ? options.fn(this)\n          : options.inverse(this);\n      } else return options.inverse(this);\n    default:\n      return options.inverse(this);\n    }\n  });\n  // isType - Checks is expected type\n  handlebars.registerHelper('isType', function (value, expected, options) {\n    if (value === expected) {\n      return options.fn(this); // Render the block if condition is true\n    } else {\n      return options.inverse(this); // Render the else block if present\n    }\n  });\n  // ifAny - {{{#ifAny variable1 variable2 variable3 variable4 etc}}, if any set then return true\n  handlebars.registerHelper('ifAny', function (...args) {\n    const options = args.pop(); // The last argument is the options object\n    return args.some(arg => !!arg) ? options.fn(this) : options.inverse(this);\n  });\n  // now - return current timestamp i.e {{now}}\n  handlebars.registerHelper('now', function() {\n    return new Date().toISOString();\n  });\n  // formatDate - Format Date, for footer meta data i.e {{formatDate '2023-06-23'}}\n  handlebars.registerHelper('formatDate', function(dateString, defaultDate, format) {\n    // Use the dateString if provided, otherwise use the defaultDate, otherwise error\n    let date;\n    if (dateString) {\n      date = new Date(dateString);\n    }\n    if (isNaN(date) && defaultDate) {\n      date = new Date(defaultDate);\n    }\n\n    // Check if the date is valid\n    if (isNaN(date)) {\n      return 'Invalid Date';\n    }\n\n    var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    var day = date.getDate();\n    var month = monthNames[date.getMonth()];\n    var year = date.getFullYear();\n    // Format date based on the format string\n    switch (format) {\n    case 'YYYY':\n      return `${year}`;\n    case 'MMMM YYYY':\n      return `${month} ${year}`;\n    default:\n      return `${day} ${month} ${year}`;\n    }\n  });\n\n  // formatDateOrToday - Format Date if passed or today i.e. {{formatDateOrToday '2023-06-23'}} or {{formatDateOrToday}} <!-- This will use the current date -->\n  handlebars.registerHelper('formatDateOrToday', function(dateString, format) {\n    // Use the current date if dateString is missing or invalid\n    const dateToFormat = dateString || new Date().toISOString();\n    // Call the formatDate helper with the determined date and format\n    return handlebars.helpers.formatDate(dateString, dateToFormat, format);\n  });\n\n  /**\n   * Format time duration into a string.\n   *\n   * Supports two formats: \"short\" and \"long\".\n   * - Short format: Display the duration in simplified format of \"HH:MM:SS\". It is the default format.\n   * - Long format: Display the duration in descriptive format of \"X hours Y minutes Z seconds\".\n   *\n   * @param {Object | String} duration - Duration object with properties: 'hours', 'minutes', and 'seconds'. Duration string: \"HH:MM:SS\".\n   * @param {String} format - Option for format type 'short' or 'long'. If none provided, 'short' is the defaut value.\n   *\n   * @returns {String} Formatted duration\n   * Examples:\n   * - 03:00:00 - 3 hours\n   * - 03:15:00 - 3 hours 15 minutes\n   * - 01:30:45 - 1 hour 30 minutes 45 seconds\n   * - 02:00:45 - 2 hours 45 seconds\n   * - 07:12 - 7 minutes 12 seconds\n   * - 00:45 - 45 seconds\n   *\n   * Usage:\n   * {{formatDuration duration}}\n   * {{formatDuration duration \"long\"}}\n   */\n  handlebars.registerHelper('formatDuration', function(duration, format) {\n    // Return empty string when there is no duration.\n    if (!duration) {\n      return \"\";\n    }\n\n    // Nothing to process here when the duration is already in short format string\n    // (to support existing CMS metadata).\n    if (typeof(duration) === 'string' && format !== \"long\") {\n      return duration;\n    }\n\n    let durationString = \"\";\n    let parts = [];\n    let hours, minutes, seconds;\n\n    // Support for string type 'duration'.\n    if (typeof(duration) === 'string') {\n      const durationSplit = duration.split(\":\");  \n      seconds = durationSplit[0];\n      if (durationSplit.length == 2) {\n        [minutes = \"\", seconds = \"\"] = durationSplit;\n      } else if (durationSplit.length == 3) {\n        [hours = \"\", minutes = \"\", seconds = \"\"] = durationSplit;\n      }\n    } else {\n      // Support for object type 'duration'.\n      [hours = \"\", minutes = \"\", seconds = \"\"] = duration;\n    }\n\n    // Long format: \"X hours Y minutes Z seconds\"\n    if (format === \"long\") {\n      if (hours > 0) {\n        parts.push(`${hours} hour${hours > 1 ? 's' : ''}`);\n      }\n      if (minutes > 0) {\n        parts.push(`${minutes} minute${minutes > 1 ? 's' : ''}`);\n      }\n      if (seconds > 0) {\n        parts.push(`${seconds} second${seconds > 1 ? 's' : ''}`);\n      }\n      durationString = parts.join(\" \");\n\n    // Short format: \"HH:MM:SS\"\n    } else {\n      // Omitting hours when zero\n      if (hours > 0) {\n        parts.push(hours.toString().padStart(2, 0));\n      }\n      parts.push(minutes.toString().padStart(2, 0));\n      parts.push(seconds.toString().padStart(2, 0));\n      durationString = parts.join(\":\");\n    }\n    return durationString;\n  });\n\n  // helper for extending components to set overridable data values\n  // if the value is not set in the component data.json, it will use the hds data value\n  handlebars.registerHelper('isdefined', function (value, defaultValue) {\n    return value !== undefined ? value : defaultValue;\n  });\n\n  /**\n   * Helper for extending components to set overridable data values\n   * If the value is not set in the component data.json, it will use the hds data value\n   * \n   * @param {string} value - The value to check if it is defined\n   * @param {string} defaultValue - The default value to return if value is not defined\n   * @returns {string} - The value if it is defined, otherwise the default value\n   */\n  handlebars.registerHelper('isdefined', function (value, defaultValue) {\n    return value !== undefined && value !== \"\" ? value : defaultValue;\n  });\n\n  /**\n   * Used to get class names added to an element based on their boolean values in an array\n   * \n   * @param {string} names - Comma-separated list of class names to check for\n   * @param {array} array - Array of objects to check for true values\n   * @returns {string} - Space-separated list of class names that have true values\n   */\n  handlebars.registerHelper('getClassNames', function(names, array) {\n    // Split the comma-separated string of names into an array\n    let nameList = names.split(',').map(name => name.trim());\n\n    // Create an array to hold the names that have true values\n    let matchedItems = [];\n\n    for (let i = 0; i < nameList.length; i++) {\n      let name = nameList[i];\n      // Check if any item in the array matches the name and is true\n      if(array){\n        for (let j = 0; j < array.length; j++) {\n          if (array[j][name] === true) {\n            matchedItems.push(name); // Add to matchedItems if found and true\n            break;\n          }\n        }\n      }\n    }\n\n    // If we found any matched items, return them as a space-separated string\n    if (matchedItems.length > 0) {\n      return matchedItems.join(' ');\n    } else {\n      return \"\";\n    }\n  });\n\n  handlebars.registerHelper(\"join\", function (theArray, separator) {\n    // Handle if a separator is not provided\n    if (!separator || typeof separator !== \"string\") {\n      separator = \" \";\n    }\n    \n    // If theArray is not an array, return it as is, otherwise join it\n    return !Array.isArray(theArray) ? theArray : theArray.join(separator);\n  });\n  \n  handlebars.registerHelper('toCamelCase', function (text) {\n    if (typeof text !== 'string') return text;\n\n    // Remove whitespace and convert to camelCase\n    return text\n      .toLowerCase()\n      .replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) =>\n        index === 0 ? match.toLowerCase() : match.toUpperCase(),\n      )\n      .replace(/\\s+/g, ''); // Remove all spaces\n  });\n\n}\n\nif(typeof(Handlebars) !== 'undefined') {\n  handlebarsHelpers(Handlebars);\n}\n"],
  "mappings": "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",
  "names": ["handlebarsHelpers", "handlebars", "needle", "haystack", "options", "v1", "operator", "v2", "value", "expected", "args", "arg", "dateString", "defaultDate", "format", "date", "monthNames", "day", "month", "year", "dateToFormat", "duration", "durationString", "parts", "hours", "minutes", "seconds", "durationSplit", "defaultValue", "names", "array", "nameList", "name", "matchedItems", "i", "j", "theArray", "separator", "text", "match", "index"]
}
