{
  "version": 3,
  "sources": ["../../../src/js/handlebars.helpers.js"],
  "sourcesContent": ["/* global Handlebars */\n/**\n * Registers Handlebars Helpers\n * @param {Handlebars} handlebars Templating engine\n * @returns {void} Result of the helper operation\n */\n\nexport default function handlebarsHelpers(handlebars) {\n  // contains - if first object is in collection (second object) to return true\n  handlebars.registerHelper(\"contains\", function (needle, haystack, options) {\n    needle = handlebars.escapeExpression(needle);\n    haystack = handlebars.escapeExpression(haystack);\n    return haystack.indexOf(needle) > -1\n      ? options.fn(this)\n      : options.inverse(this);\n  });\n  // ifCond - checks conditions\n  handlebars.registerHelper(\"ifCond\", function (v1, operator, v2, options) {\n    switch (operator) {\n    case \"==\":\n      return v1 == v2 ? options.fn(this) : options.inverse(this);\n    case \"===\":\n      return v1 === v2 ? options.fn(this) : options.inverse(this);\n    case \"!=\":\n      return v1 != v2 ? options.fn(this) : options.inverse(this);\n    case \"!==\":\n      return v1 !== v2 ? options.fn(this) : options.inverse(this);\n    case \"<\":\n      return v1 < v2 ? options.fn(this) : options.inverse(this);\n    case \"<=\":\n      return v1 <= v2 ? options.fn(this) : options.inverse(this);\n    case \">\":\n      return v1 > v2 ? options.fn(this) : options.inverse(this);\n    case \">=\":\n      return v1 >= v2 ? options.fn(this) : options.inverse(this);\n    case \"&&\":\n      return v1 && v2 ? options.fn(this) : options.inverse(this);\n    case \"||\":\n      return v1 || v2 ? options.fn(this) : options.inverse(this);\n    case \"contains\":\n      if (typeof v1 == \"string\" && typeof v2 == \"string\") {\n        return v1.toLowerCase().indexOf(v2.toLowerCase()) >= 0\n          ? options.fn(this)\n          : options.inverse(this);\n      } else return options.inverse(this);\n    default:\n      return options.inverse(this);\n    }\n  });\n  // isType - Checks is expected type\n  handlebars.registerHelper('isType', function (value, expected, options) {\n    if (value === expected) {\n      return options.fn(this); // Render the block if condition is true\n    } else {\n      return options.inverse(this); // Render the else block if present\n    }\n  });\n  // ifAny - {{{#ifAny variable1 variable2 variable3 variable4 etc}}, if any set then return true\n  handlebars.registerHelper('ifAny', function (...args) {\n    const options = args.pop(); // The last argument is the options object\n    return args.some(arg => !!arg) ? options.fn(this) : options.inverse(this);\n  });\n  // formatDate - Format Date, for footer meta data i.e {{formatDate '2023-06-23'}}\n  handlebars.registerHelper('formatDate', function(dateString, defaultDate) {\n    // Use the dateString if provided, otherwise use the defaultDate, otherwise error\n    let date;\n    if (dateString) {\n      date = new Date(dateString);\n    }\n    if (isNaN(date) && defaultDate) {\n      date = new Date(defaultDate);\n    }\n\n    // Check if the date is valid\n    if (isNaN(date)) {\n      return 'Invalid Date';\n    }\n\n    var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    var day = date.getDate();\n    var month = monthNames[date.getMonth()];\n    var year = date.getFullYear();\n    return `${day} ${month} ${year}`;\n  });\n\n  // formatDateOrToday - Format Date if passed or today i.e. {{formatDateOrToday '2023-06-23'}} or {{formatDateOrToday}} <!-- This will use the current date -->\n  handlebars.registerHelper('formatDateOrToday', function(dateString) {\n    // Use the current date if dateString is missing or invalid\n    const dateToFormat = dateString || new Date().toISOString();\n    // Call the formatDate helper with the determined date and format\n    return handlebars.helpers.formatDate(dateToFormat);\n  });\n}\n\nif(typeof(Handlebars) !== 'undefined') {\n  handlebarsHelpers(Handlebars);\n}\n"],
  "mappings": "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",
  "names": ["handlebarsHelpers", "handlebars", "needle", "haystack", "options", "v1", "operator", "v2", "value", "expected", "args", "arg", "dateString", "defaultDate", "date", "monthNames", "day", "month", "year", "dateToFormat"]
}
